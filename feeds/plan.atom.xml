<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Uniqush Blog - plan</title><link href="http://blog.uniqush.org/" rel="alternate"></link><link href="http://blog.uniqush.org/feeds/plan.atom.xml" rel="self"></link><id>http://blog.uniqush.org/</id><updated>2012-03-28T00:00:00+02:00</updated><entry><title>Uniqush after Go 1</title><link href="http://blog.uniqush.org/uniqush-after-go1.html" rel="alternate"></link><published>2012-03-28T00:00:00+02:00</published><updated>2012-03-28T00:00:00+02:00</updated><author><name>Monnand</name></author><id>tag:blog.uniqush.org,2012-03-28:/uniqush-after-go1.html</id><summary type="html">&lt;p&gt;Today, March 28th 2012, is a big day for every gopher: Go team
&lt;a href="http://blog.golang.org/2012/03/go-version-1-is-released.html"&gt;released Go version 1&lt;/a&gt;. This
means Go -- both the language itself and its standard library -- is
stable now. Because of this, I think it's time to move
&lt;a href="http://uniqush.org"&gt;uniqush&lt;/a&gt; onto next stage. I would like to share
the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, March 28th 2012, is a big day for every gopher: Go team
&lt;a href="http://blog.golang.org/2012/03/go-version-1-is-released.html"&gt;released Go version 1&lt;/a&gt;. This
means Go -- both the language itself and its standard library -- is
stable now. Because of this, I think it's time to move
&lt;a href="http://uniqush.org"&gt;uniqush&lt;/a&gt; onto next stage. I would like to share
the blueprint of &lt;a href="http://uniqush.org"&gt;uniqush&lt;/a&gt; in this article.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instead of simply providing push service,
&lt;a href="http://uniqush.org"&gt;uniqush&lt;/a&gt; will try to provide communication
facilities for mobile developers, including both server-side
developers and mobile-side developers.&lt;/strong&gt; This change will make the
current work of &lt;a href="http://uniqush.org"&gt;uniqush&lt;/a&gt;, which only has one
single program -- &lt;em&gt;uniqushd&lt;/em&gt;, become a (relatively small) part of the
whole uniqush project.&lt;/p&gt;
&lt;p&gt;In the future, the uniqush project will mainly consists of four
parts: &lt;em&gt;uniqush-push&lt;/em&gt;, &lt;em&gt;uniqush-conn&lt;/em&gt;, &lt;em&gt;uniqush-front&lt;/em&gt; and &lt;em&gt;uniqush-mobile-libs&lt;/em&gt;. I would
explain each of them in the following sections.&lt;/p&gt;
&lt;h3&gt;uniqushd becomes uniqush-push (done)&lt;/h3&gt;
&lt;p&gt;Currently, uniqushd is the only program we provide in uniqush
project. The function of this program is to behave as a proxy between
third party server and push service cloud (C2DM, APNs, etc.) so that
the third party server can push messages to many platforms (Android,
iOS) in a consistent syntax without knowing protocols on different
clouds.&lt;/p&gt;
&lt;p&gt;In the future, &lt;em&gt;uniqushd&lt;/em&gt; will be renamed to &lt;em&gt;uniqush-push&lt;/em&gt; because it
actually only deals with push service. It will support more platforms
(Windows Phone, Black Berry, etc.), but there is no more functions
added to this program. It only focuses on one single task: push a
message through different clouds.&lt;/p&gt;
&lt;h3&gt;uniqush-conn handles connections between server and apps&lt;/h3&gt;
&lt;p&gt;When I say &lt;em&gt;server&lt;/em&gt;, I mean an entity that may consists of more than
one node. This means it may be a cloud, a cluster, more precisely, or
even a datacenter. (OK. it may be, if they want, several datacenters.)&lt;/p&gt;
&lt;p&gt;Imagine you have an app, let's say an online chat app, needs to
connect your server directly once it is active. You may define
the word &lt;em&gt;active&lt;/em&gt; under your context. In most cases, it is when the
app is in front, i.e. user is using the app on his phone now. If the
server sends a message to the app now, the server may want to use this
direct connection instead of push service cloud to send this message.&lt;/p&gt;
&lt;p&gt;In an example of online chat app, user A sends a message to
user B. User A first start his app on the phone. The app then connects to
the server saying "I'm A and am online now". From now on, the
app on user A's phone is active and a connection between the app
 and the server is established. User A wants to chat
with B. He types in some message, click send button and the message is
sent to the server through the newly established connection. The
server unpacks the message seeing it is a message for B. It checks
whether B is online/active now. If B is online, then there's a
connection between the server and B, the server can send the message
through this connection. If B is not, then the server will send some
message, saying "Hey, B, you got a message from A, check it!" through
push service clouds (C2DM, APNs, etc.).&lt;/p&gt;
&lt;p&gt;If the server in the previous example is using facilities from
uniqush, then it may use &lt;em&gt;uniqush-push&lt;/em&gt; to send message through push
service clouds, and use &lt;em&gt;uniqush-conn&lt;/em&gt; to deal with active connections
between the server and apps.&lt;/p&gt;
&lt;p&gt;In fact, the server does not even need to know if a certain user is
online or not. &lt;em&gt;uniqush-conn&lt;/em&gt; can deal with it and decide whether send
message through a direct connection, or through &lt;em&gt;uniqush-push&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now we can see the benefit. As a server-side developer, you only need
to send a message to &lt;em&gt;uniqush-conn&lt;/em&gt;, and say "Send this message to
user B". Then you are done. What if the user B was offline? Well,
&lt;em&gt;uniqush-conn&lt;/em&gt; could then automatically tell &lt;em&gt;uniqush-push&lt;/em&gt; to push a
notification to user B. If the message if too big to be fit into a
notification, &lt;em&gt;uniqush-conn&lt;/em&gt; will send a notification to user B,
saying ``You got a message'', keep a temporary copy of that message
and send the message to user B once it's online. The server even does
not know the existence of &lt;em&gt;uniqush-push&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;uniqush-front handles scale-out growth&lt;/h3&gt;
&lt;p&gt;As I mentioned, &lt;em&gt;server&lt;/em&gt; side may consists of more than one
node. With the increasing of number of connections, growing in a
scale-out way should be a concern for server developers. We introduce
&lt;em&gt;uniqush-front&lt;/em&gt; to handle connections distributed among several
instances of &lt;em&gt;uniqush-conn&lt;/em&gt; in more than one nodes (or cloud
instances). The server-side program will finally only communicate with
&lt;em&gt;uniqush-front&lt;/em&gt; without knowing which instance of &lt;em&gt;uniqush-conn&lt;/em&gt;
handles which connection. The protocol between server and
&lt;em&gt;uniqush-front&lt;/em&gt; will be exactly the same as the protocol between
server and &lt;em&gt;uniqush-conn&lt;/em&gt;. So that changing from &lt;em&gt;uniqush-conn&lt;/em&gt; to
&lt;em&gt;uniqush-front&lt;/em&gt; will not lead to change of code.&lt;/p&gt;
&lt;p&gt;Suppose the server side has 10 nodes. Each node runs an instance of
&lt;em&gt;uniqush-conn&lt;/em&gt;. A certain user may connect one of the instance on some
node. The server side program only need to tell &lt;em&gt;uniqush-front&lt;/em&gt; what
message needs to be sent to which user. Then &lt;em&gt;uniqush-front&lt;/em&gt; will
figure out which instance of &lt;em&gt;uniqush-conn&lt;/em&gt; should be use. Adding more
node will not be a pain because the server side program won't be
changed.&lt;/p&gt;
&lt;h3&gt;uniqush-mobile-libs helps app developers&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;uniqush-conn&lt;/em&gt; keeps connections between apps and the server. It also
 sends messages, commands to apps. The app developers do not need to
 know details about how to communicate with
 &lt;em&gt;uniqush-conn&lt;/em&gt;. &lt;em&gt;uniqush-mobile-libs&lt;/em&gt; will contain libraries for
 popular mobile platforms so that app developers can use it to
 communicate with &lt;em&gt;uniqush-conn&lt;/em&gt;, hence with the server side program.&lt;/p&gt;
&lt;h3&gt;When?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;uniqush-push&lt;/em&gt; is already there. I only need to change its name from
 &lt;em&gt;uniqushd&lt;/em&gt; to &lt;em&gt;uniqush-push&lt;/em&gt;. I will start developing &lt;em&gt;uniqush-conn&lt;/em&gt;
in this week and (hopefully) &lt;em&gt;uniqush-conn&lt;/em&gt; and &lt;em&gt;uniqush-mobile-libs&lt;/em&gt;
will be released before Sep. 2012.&lt;/p&gt;
&lt;p&gt;I wish I can make it faster. But sorry for disappointing you, it seems
impossible for me: there is only one developer in this project, and
yes, I am the developer. If you are interested in this project and
want to make your own contribution, please feel free to contact me.&lt;/p&gt;
&lt;h3&gt;Update&lt;/h3&gt;
&lt;p&gt;As I mentioned, &lt;em&gt;uniqush-push&lt;/em&gt; is online now. It is more than a
renaming work. All related documents are changed respectively. If you
find any inconsistence between the document and the code, please let
me know. Thank you very much.&lt;/p&gt;</content><category term="uniqush"></category><category term="golang"></category><category term="Go1"></category><category term="plan"></category></entry></feed>